* Emacsの設定
  * GCを行う閾値の設定をする
** src
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold (* 2 1024 1024))
   #+END_SRC
* Emacs Versionの設定
  変数emacs-major-version, emacs-minor-versionを設定する

** src
  #+BEGIN_SRC emacs-lisp
    (defvar init-emacs-ver
      (cond ((= 24 emacs-major-version)
             (cond ((= 1 emacs-minor-version) 'emacs-24-1)
                   ((= 3 emacs-minor-version) 'emacs-24-3)))
            (t 'emacs-other)))
  #+END_SRC

* init用の関数定義
** src
   #+BEGIN_SRC emacs-lisp
     (defun init-add-autoload (file list)
       ;; add autoload function from list
       (if (null list) t
         (let ((fun (car list)))
           (autoload fun file nil t)
           (init-add-autoload file (cdr list)))))

     (defun init-add-fun-to-hooks (fun hooks)
       ;; add function to hooks
       (if (null hooks) t
         (let ((hook (car hooks)))
           (add-hook hook fun)
           (init-add-fun-to-hooks fun (cdr hooks)))))

     (defmacro append-to-list (to lst)
       `(setq ,to (append ,lst ,to)))
   #+END_SRC
* 定数の設定
  * init-emacs-local-files : ローカルで使用するファイルの置き場所(ex. undohist)
** src
   #+BEGIN_SRC emacs-lisp
     (defvar init-emacs-local-files "~/.emacs.d/local")
   #+END_SRC
* use package
  init.elが書きやすくなるマクロを定義したパッケージ

** src
  #+BEGIN_SRC emacs-lisp
    (unless (require 'use-package nil t)
      (defmacro use-package (&rest args)))

  #+END_SRC

* 文字コード/ファイル名の設定
  ロケールやosによってデフォルトのコーディングを変える

** src
  #+BEGIN_SRC emacs-lisp
    (set-language-environment "Japanese")  ; emacs のロケールを日本語に
    (cond ((eq system-type 'gnu/linux)
           (prefer-coding-system 'utf-8-unix))
          ((eq system-type 'darwin)
           (prefer-coding-system 'utf-8)
           (when (require 'ucs-normalize nil t)
             (setq file-name-coding-system 'utf-8)
             (setq local-coding-system 'utf-8)))
          (t
           (prefer-coding-system 'sjis-dos)     ; Windows ならコーディングを sjis に
           (set-file-name-coding-system 'cp932) ; ファイル名も sjis
           (setq locale-coding-system 'cp932)))

  #+END_SRC

* elscreen
  emacs上でタブが使えるようになるパッケージ

** src
  #+BEGIN_SRC emacs-lisp
    (use-package elscreen
      :commands
      (elscreen-start)
      :config
      (progn
        (elscreen-set-prefix-key (kbd "C-;"))

        (defmacro elscreen-create-automatically (ad-do-it)
          (` (if (not (elscreen-one-screen-p))
                 (, ad-do-it)
               (elscreen-create)
               (elscreen-notify-screen-modification 'force-immediately)
               (elscreen-message "New screen is automatically created"))))

        (defadvice elscreen-next (around elscreen-create-automatically activate)
          (elscreen-create-automatically ad-do-it))

        (defadvice elscreen-previous (around elscreen-create-automatically activate)
          (elscreen-create-automatically ad-do-it))

        (defadvice elscreen-toggle (around elscreen-create-automatically activate)
          (elscreen-create-automatically ad-do-it)))
      :init
      (progn
        (elscreen-start)))
  #+END_SRC

* モードラインの設定

** src
   #+BEGIN_SRC emacs-lisp
     ;;; nyan-mode
     (use-package nyan-mode
       :commands
       (nyan-mode)
       :config
       (progn
         (setq nyan-bar-length 10
               nyan-wavy-trail nil)
         (nyan-stop-animation))
       :init
       (nyan-mode))

     ;; Helper function
     (defun shorten-directory (dir max-length)
       "Show up to `max-length' characters of a directory name `dir'."
       (let ((path (reverse (split-string (abbreviate-file-name dir) "/")))
             (output ""))
         (when (and path (equal "" (car path)))
           (setq path (cdr path)))
         (while (and path (< (length output) (- max-length 4)))
           (setq output (concat (car path) "/" output))
           (setq path (cdr path)))
         (when path
           (setq output (concat ".../" output)))
         output))

     ;; Mode line setup
     (defun init-mode-line-setup ()
       (setq-default
        mode-line-format
        '(; Position, including warning for 80 columns
          (:propertize "%4l:" face mode-line-position-face)
          (:eval (propertize "%3c" 'face
                             (if (>= (current-column) 80)
                                 'mode-line-80col-face
                               'mode-line-position-face)))
          ;; emacsclient [default -- keep?]
          mode-line-client
          " "
          ;; read-only or modified status
          (:eval
           (cond (buffer-read-only
                  (propertize "RO" 'face 'mode-line-read-only-face))
                 ((buffer-modified-p)
                  (propertize "**" 'face 'mode-line-modified-face))
                 (t "NE")))
          ;; directory and buffer/file name
          " "
          (:propertize (:eval (shorten-directory default-directory 30))
                       face mode-line-folder-face)
          (:propertize "%b"
                       face mode-line-filename-face)
          " "
          "["(:propertize mode-name face mode-line-mode-face)"]"
          (vc-mode vc-mode)
          (:propertize mode-line-process face mode-line-process-face)
          (global-mode-string global-mode-string)
          " "
          (:eval (when nyan-mode (list (nyan-create)))) "%p"
          ))

       ;; Extra mode line faces
       (make-face 'mode-line-read-only-face)
       (make-face 'mode-line-modified-face)
       (make-face 'mode-line-folder-face)
       (make-face 'mode-line-filename-face)
       (make-face 'mode-line-position-face)
       (make-face 'mode-line-mode-face)
       (make-face 'mode-line-process-face)
       (make-face 'mode-line-80col-face)

       (set-face-attribute 'mode-line nil
                           :foreground "spring green" :background "gray20"
                           :inverse-video nil
                           :box '(:line-width 2 :color "gray20" :style nil))
       (set-face-attribute 'mode-line-inactive nil
                           :foreground "gray80" :background "gray40"
                           :inverse-video nil
                           :box '(:line-width 4 :color "gray40" :style nil))
       (set-face-attribute 'mode-line-read-only-face nil
                           :inherit 'mode-line-face
                           :foreground "#4271ae"
                           :box '(:line-width 2 :color "#4271ae"))
       (set-face-attribute 'mode-line-modified-face nil
                           :inherit 'mode-line-face
                           :foreground "#c82829"
                           :background "#ffffff"
                           :box '(:line-width 2 :color "#c82829"))
       (set-face-attribute 'mode-line-folder-face nil
                           :inherit 'mode-line-face)
       (set-face-attribute 'mode-line-filename-face nil
                           :inherit 'mode-line-face
                           :foreground "deeppink"
                           :weight 'bold)
       (set-face-attribute 'mode-line-position-face nil
                           :inherit 'mode-line-face
                           :family "Menlo" :height 100)
       (set-face-attribute 'mode-line-mode-face nil
                           :inherit 'mode-line-face)
       (set-face-attribute 'mode-line-process-face nil
                           :inherit 'mode-line-face)
       (set-face-attribute 'mode-line-80col-face nil
                           :inherit 'mode-line-position-face
                           :foreground "black" :background "#eab700"))

     (init-mode-line-setup)
   #+END_SRC

* 表示関係
** Theme
*** src
    #+BEGIN_SRC emacs-lisp
      (defvar init-load-theme-path "~/.emacs.d/el-get/organic-green-theme/")
      (when (file-exists-p init-load-theme-path)
        (add-to-list 'custom-theme-load-path init-load-theme-path)
        (load-theme 'organic-green t nil)
        (set-face-foreground 'font-lock-builtin-face "magenta"))
    #+END_SRC
** 括弧のハイライト
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package paren
        :config
        (progn
          (setq show-paren-delay 0.1   ;括弧のハイライトを表示するまでの時間
                show-paren-style 'expression) ;括弧の中もハイライト
          (set-face-background 'show-paren-match-face nil) ;バックグランドフェイスを消す
          (set-face-underline 'show-paren-match-face "green")) ;下線の色をつける
        :init
        (show-paren-mode t))
    #+END_SRC
** pretty-mode
   lambdaや<=などの文字列をλなどの記号に置き換える.
*** 内容
    - racket-modeをscheme-modeの置き換えに対応付ける
    - ∅(pretty-modeでは:nilのgroup)を表示させない
    - プログラム関係のファイルのフック(prog-mode-hook)に掛ける

*** TODO src
    #+BEGIN_SRC emacs-lisp
      (use-package pretty-mode
        :init
        (progn
          (setq pretty-active-groups
                '((coq-mode . (:greek))
                  (racket-mode . ()))))
        :config
        (progn
          (global-pretty-mode 1)))

    #+END_SRC
* キーバインドの設定
** src
   #+BEGIN_SRC emacs-lisp
     (keyboard-translate ?\C-h ?\C-?)                                                ; C-hをBackSpaceキーに変更
     (bind-key "\C-h" nil)
     (bind-key "C-m" 'newline-and-indent)            ; C-m に改行 インデントを割り当てる(
     (bind-key "C-c l" 'toggle-truncate-lines)       ; C-c l に折り返しを割り当てる
     (bind-key "M-l" 'goto-line)
     (bind-key "C-c i" 'init-open-dotemacs)          ; C-c で init ファイルオープン
     (bind-key "C-c j" 'split-window-horizontally)
     (bind-key "C-c u" 'split-window-vertically)
     (bind-key "C-c r" 'query-replace)

     (defun init-open-dotemacs ()
       (interactive)
       (find-file "~/.emacs.d/init.org"))
   #+END_SRC

* skk
  日本語入力システム
** src
   #+BEGIN_SRC emacs-lisp
     (use-package skk
       :commands
       (skk-mode skk-latin-mode-on)
       :bind
       (("<muhenkan>" . skk-mode)
        ("<zenkaku-hankaku>" . skk-mode))
       :init
       (progn
         (defun init-skk-mode-hooks ()
           (progn
             (skk-mode 1)
             (skk-latin-mode-on)))

         (init-add-fun-to-hooks 'init-skk-mode-hooks
                                '(find-file-hook lisp-intraction-mode-hook))

         (setq skk-user-directory (file-name-as-directory (concat (file-name-as-directory init-emacs-local-files) ".ddskk")))

         (defun init-check-jisyo-file ()
           (unless (file-exists-p
                    (concat skk-user-directory "SKK-JISYO.L"))
             (unless (file-exists-p skk-user-directory)
               (make-directory skk-user-directory))
             (message "Downloading SKK-JISYO.L")
             (url-copy-file "http://openlab.jp/skk/dic/SKK-JISYO.L.gz" "SKK-JISYO.L.gz")
             (message "Decompressing SKK-JISYO.L")
             (call-process-shell-command "gzip -d SKK-JISYO.L.gz")
             (message "Move SKK-JISYO.L")
             (call-process-shell-command (format "mv SKK-JISYO.L %s" skk-user-directory))))

         (init-check-jisyo-file))
       :config
       (progn
         (setq default-input-method "japanese-skk"
               skk-kutouten-type 'en
               skk-kuten-touten-alist '((jp . ("." . "," ))
                                        (en . ("." . ","))); 句読点を「，．」にする
               skk-large-jisyo (concat (file-name-as-directory skk-user-directory) "SKK-JISYO.L")
               skk-use-azik t
               skk-azik-keyboard-type 'jp106)

         (skk-mode 1)                     ; 次のfaceを定義させるために必要

         (set-face-attribute 'skk-emacs-hiragana-face nil
                             :family "MigMix 2M"
                             :foreground "pink")))
   #+END_SRC
* moccur関連
  grep検索可能になるパッケージ
** src
   #+BEGIN_SRC emacs-lisp
     (use-package color-moccur
       :bind
       (("C-c s" . moccur-grep-find))
       :config
       (progn
         (setq moccur-split-word t
               moccur-kill-moccur-buffer t
               moccur-grep-default-word-near-point t)

         (append-to-list dmoccur-exclusion-mask
                         '("\\.DS_Store" "^#.+#$"
                           ".gitignore") ; ディレクトリ検索するとき除外するファイル
                         )))

     (use-package moccur-edit
       :config
       (progn
         ;; moccur-edit-finish-edit と同時にファイルを保存する
         (defadvice moccur-edit-change-file
           (after save-after-moccur-edit-buffer activate)
           (save-buffer))))
   #+END_SRC
* redo/undo関連
  * undo-tree : C-x u でundo treeを表示
** src
   #+BEGIN_SRC emacs-lisp
     (use-package undohist
       :commands
       (undohist-initialize)
       :config
       (progn
            (setq undohist-ignored-files '("COMMIT_EDITMSG")))
       :init
       (progn
         (setq undohist-directory (concat (file-name-as-directory init-emacs-local-files) ".undohist"))
         (undohist-initialize)))

     (use-package undo-tree
       :bind
       (("C-." . undo-tree-redo))
       :commands
       (global-undo-tree-mode)
       :config
       (global-undo-tree-mode))
   #+END_SRC
* sequential-command
  同じキーバインドで押下回数によって動作を変えれるパッケージ
** src
   #+BEGIN_SRC emacs-lisp
     (use-package sequential-command-config
        :bind
        (("C-a" . seq-home)
         ("C-e" . seq-end)))
   #+END_SRC

* 正規表現
** pcre2el
   emacs上でpcre(perl正規表現)が使える
*** 参考url
    - http://rubikitch.com/2015/04/25/pcre2el/
*** key-bind
    - C-c / / :: rxt-explain emacsの正規表現をpcreで解説
    - C-c / c :: rxt-convert-syntax Emacs/PCRE間の変換し、kill-ringへ
    - C-c / x :: rxt-convert-to-rx rxへの変換
    - C-c / ′ :: rxt-convert-to-strings 文字列集合へ分解
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package pcre2el
        :config
        (progn
          (add-hook 'prog-mode-hook 'rxt-mode)
          (add-hook 'reb-mode-hook 'rxt-mode)
          (setq reb-re-syntax 'pcre)))
    #+END_SRC
* dired mode
** src
   #+BEGIN_SRC emacs-lisp
     (use-package dired
       :config
       (progn
         (bind-key "C-t" 'ace-window dired-mode-map)
         (require 'dired-x nil t)))

   #+END_SRC
* 矩形編集
  cua modeを使用する
** src
   #+BEGIN_SRC emacs-lisp
     (use-package cua-base
       :bind
       (("C-x SPC" . cua-set-rectangle-mark)
        ("C-x C-SPC" . cua-set-rectangle-mark))
       :config
       (progn
         ; cuaのキーバインドを禁止
         (setq cua-enable-cua-keys nil))
       :init
       (cua-mode 1))
   #+END_SRC
* auto-complete
** src
   #+BEGIN_SRC emacs-lisp
     (global-auto-complete-mode t)
     (ac-config-default)
   #+END_SRC
* ace-mode
** ace-mode
   #+BEGIN_SRC emacs-lisp
     (use-package ace-jump-buffer
       :disabled t
       :bind
       (("C-x b" . ace-jump-buffer)))

     (use-package ace-window
       :bind
       (("C-t" . ace-window))
       :init
       (progn
         (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))))
   #+END_SRC
* helm
** src
   #+BEGIN_SRC emacs-lisp
     (use-package helm-config
       :config
       (progn
         (helm-mode 1)
         (setq helm-ff-skip-boring-files t
               helm-exit-idle-delay 0)
         (append-to-list helm-boring-file-regexp-list
                         '("\\.omc$" "\\.o$" "\\.cmx$" "\\.cmi$" "\\.cmt$" "\\.omakedb" "\\.pyc$"
                           "\\.hi$" "\\.DS_Store"))

         (defun my-filter-dired-buffers (buffer-list)
           (delq nil (mapcar
                    (lambda (buffer)
                      (if (eq (with-current-buffer buffer major-mode)  'dired-mode)
                          nil
                        buffer))
                    buffer-list)))

         (advice-add 'helm-skip-boring-buffers :filter-return 'my-filter-dired-buffers)))

     (use-package ac-helm
       :bind
       (("C-:" . ac-complete-with-helm)))
   #+END_SRC
* プログラム関連
** tags
*** ctags
**** src
     #+BEGIN_SRC emacs-lisp
       (use-package ctags
         :config
         (progn
           (setq tags-revert-without-query t
                 ctags-command "ctags -R"))
         :bind
         (("<f5>" . ctags-create-or-update-tags-table))) ;tag ファイルの生成
     #+END_SRC
*** gtags
**** src
     #+BEGIN_SRC emacs-lisp
       (use-package gtats
         :commands
         (gtags-mode gtags-make-complete-list)
         :config
         (progn
           (bind-key "M-t" 'gtags-find-tag gtags-mode-map)
           (bind-key "M-r" 'gtags-find-rtag gtags-mode-map)
           (bind-key "M-s" 'gtags-find-symbol gtags-mode-map)
           (bind-key "C-t" 'gtags-pop-stack gtags-mode-map)))
     #+END_SRC
** lisp系
*** lispxmp
    プログラムの実行結果をコメントに表示させてくれるパッケージ
**** src
     #+BEGIN_SRC emacs-lisp
       (use-package lispxmp
         :commands
         (lispxmp)
         :init
         (progn
           (bind-key "C-c C-d" 'lispxmp emacs-lisp-mode-map)
           (bind-key "C-c C-d" 'lispxmp lisp-interaction-mode-map)))
     #+END_SRC

*** paredit
    括弧の対応付けを行ってくれるパッケージ
**** src
     #+BEGIN_SRC emacs-lisp
       (use-package paredit
         :commands
         (enable-paredit-mode
          paredit-wrap-round
          paredit-splice-sexp)
         :init
         (progn
           (bind-key "M-8" 'paredit-wrap-round emacs-lisp-mode-map)
           (bind-key "M-9" 'paredit-splice-sexp emacs-lisp-mode-map)
           ;; paredit-modeが自動で起動するようにhookに追加
           (init-add-fun-to-hooks 'enable-paredit-mode
                                '(emacs-lisp-mode-hook
                                  scheme-mode-hook
                                  lisp-interaction-mode-hook
                                  lisp-mode-hook
                                  ielm-mode-hook))))
     #+END_SRC
*** eldoc関連
    emacs-lispの関数の情報を表示するパッケージ
**** src
     #+BEGIN_SRC emacs-lisp
       (use-package eldoc
         :config
         (progn
              (require 'eldoc-extension nil t)
              (setq eldoc-idle-delay 0.1                ; eldocをすぐ表示
                    eldoc-echo-area-use-multiline-p t)) ; 複数行にわたって表示
         :init
         (progn
           (init-add-fun-to-hooks 'turn-on-eldoc-mode
                                  '(lisp-interaction-mode-hook
                                    lisp-mode-hook
                                    ielm-mode-hook
                                    emacs-lisp-mode-hook))))
     #+END_SRC
*** 雑多な設定
**** src
     #+BEGIN_SRC emacs-lisp
       (bind-key  "C-c f" 'describe-function emacs-lisp-mode-map)
       (bind-key  "C-c v" 'describe-variable emacs-lisp-mode-map)
       (set-face-foreground 'font-lock-regexp-grouping-backslash "green3")
       (set-face-foreground 'font-lock-regexp-grouping-construct "green3")
     #+END_SRC

** python
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package virtualwrapper
        :config
        (progn
          ((venv-initialize-interactive-shells)
           (venv-initialize-eshell)
           (setq venv-location (getenv "WORKON_HOME")))))
    #+END_SRC
** make関連
*** cmake
**** src
     #+BEGIN_SRC emacs-lisp
       (use-package cmake-mode
         :mode
         (("CMakeLists.txt" . cmake-mode) ))
     #+END_SRC
** flycheck
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :config
        (progn
          (defvar omake-program-arguments "-P -w --verbose")
          (flycheck-define-checker ocaml-checker
            "flychecker for ocaml"
            :command ("ocamlc" "-c" source)
            :error-patterns
            ((error line-start "File \"" (file-name) "\", line "
                    line ", " (minimal-match (one-or-more not-newline)) ":\n" (message) line-end))
            :modes (tuareg-mode))

          (add-to-list 'flycheck-checkers 'ocaml-checker)
          (setq flycheck-display-errors-function #'flycheck-pos-tip-error-messages
                flycheck-pos-tip-timeout 10))
        :init
        (progn
          (add-hook 'after-init-hook #'global-flycheck-mode)))

      (use-package flycheck-color-mode-line
        :config
        (progn
          (set-face-attribute 'flycheck-color-mode-line-warning-face nil
                              :foreground "orange")

          (set-face-attribute 'flycheck-color-mode-line-error-face nil
                              :foreground "tomato")
          (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode)))
    #+END_SRC
* 文章関連(Lightweight Markup etc.)
** rst
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package rst
        :mode ("\\.rst$" . rst-mode)
        :config
        (progn
          ; 背景が黒い場合はこうしないと見出しが見づらい
          (setq frame-background-mode 'dark)))
    #+END_SRC
** markdown
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package markdown-mode
        :mode ("\\.md$" . markdown-mode))
    #+END_SRC
** TODO latex
*** src
    #+BEGIN_SRC emacs-lisp
      (setq tex-compile-commands
            '(("ptex2pdf -l -ot '-synctex=1' %f")))

      (setq pdf-latex-command "ptex2pdf")

      (setq TeX-default-mode 'japanese-latex-mode)

      (setq japanese-LaTeX-default-style "jarticle")
      (setq TeX-output-view-style '(("^dvi$" "." "xdvi '%d'")))
      (setq preview-image-type 'dvipng)
      (add-hook 'LaTeX-mode-hook (function (lambda ()
        (add-to-list 'TeX-command-list
          '("pTeX" "%(PDF)ptex %`%S%(PDFout)%(mode)%' %t"
           TeX-run-TeX nil (plain-tex-mode) :help "Run ASCII pTeX"))
        (add-to-list 'TeX-command-list
          '("pLaTeX" "%(PDF)platex %`%S%(PDFout)%(mode)%' %t"
           TeX-run-TeX nil (latex-mode) :help "Run ASCII pLaTeX"))
        (add-to-list 'TeX-command-list
          '("acroread" "acroread '%s.pdf' " TeX-run-command t nil))
        (add-to-list 'TeX-command-list
          '("pdf" "dvipdfmx -V 4 '%s' " TeX-run-command t nil))
        (load "beamer")
        )))

      (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
      (setq reftex-plug-into-AUCTeX t)

      (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (setq-default TeX-master nil)

      (add-hook 'LaTeX-mode-hook 'visual-line-mode)
      ;; (add-hook 'LaTeX-mode-hook 'flyspell-mode)
      (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

      ;; Change key bindings
      (add-hook 'reftex-mode-hook
       '(lambda ()
                     (define-key reftex-mode-map (kbd "\C-cr") 'reftex-reference)
                     (define-key reftex-mode-map (kbd "\C-cl") 'reftex-label)
                     (define-key reftex-mode-map (kbd "\C-cc") 'reftex-citation)
      ))

      ;; 数式のラベル作成時にも自分でラベルを入力できるようにする
      (setq reftex-insert-label-flags '("s" "sfte"))

      ;; \eqrefを使う
      (setq reftex-label-alist
            '(
              (nil ?e nil "\\eqref{%s}" nil nil)
              ))

      ; RefTeXで使用するbibファイルの位置を指定する
      (setq reftex-default-bibliography '("~/tex/biblio.bib" "~/tex/biblio2.bib"))
    #+END_SRC
** org-mode
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package org
        :commands
        (org-present-big org-present-small org-remove-inline-images org-display-inline-images)
        :config
        (progn
          (setq org-directory "~/Dropbox/Org/"
                org-default-notes-file (concat org-directory "agenda.org") ; ディレクトリの設定
                org-startup-truncated nil ; 表示を打ち切らない
                org-export-htmlize-output-type 'css ; HTML出力したときコードハイライトcssを分離する
                org-return-follows-link t
                org-use-fast-todo-selection t
                org-display-custom-times "<%Y-%m-%d %H:%M:%S>" ; 日付けの設定
                org-time-stamp-custom-formats "<%Y-%m-%d %H:%M:%S>" ; 日付けの設定
                org-agenda-files '("~/Dropbox/Org/gtd.org"))

          ;; org-babelの設定
          (org-babel-do-load-languages
           'org-babel-load-languages
           '((python . t)
             (ocaml . t)
             (haskell . t)
             (sh .t)
             (latex .t)))

          (setq org-todo-keywords
                '((sequence "TODO(t!)" "STARTED(s!)" "WAITING(w!)"
                            "|" "DONE(x!)" "CANCEL(c!)"))
                org-tag-alist
                '(("PROJECT" . ?p) ("BOOK" . ?b)))

          (set-face-attribute 'org-todo nil
                              :foreground "selectedMenuItemColor"
                              :box t )
          (set-face-attribute 'org-done nil
                              :box t)
          (setq org-todo-keyword-faces
                '(("STARTED" . (:foreground "Orange" :box t)))))
        :init
        (progn
          (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

          (add-hook 'org-mode-hook
                    (lambda ()
                      (auto-fill-mode 1)))

          (add-hook 'org-present-mode-hook
                    (lambda ()
                      (org-present-big)
                      (setq org-present-text-scale 4)
                      (org-display-inline-images)))

          (add-hook 'org-present-mode-quit-hook
                    (lambda ()
                      (org-present-small)
                      (org-remove-inline-images))))
        )

      (use-package org-capture
        :commands
        (org-agenda org-capture)
        :bind
        (("C-c a" . org-agenda)
         ("C-c m" . org-capture))
        :config
        (progn
          (setq org-capture-templates
                '(("t" "Task" entry (file+headline nil "Inbox")
                   "* TODO  %?\n %T\n %a\n %i\n")
                  ("m" "Memo" entry (file+headline nil "Memo")
                   "* %?\n %T\n %a\n %i\n")
                  ("b" "Bug" entry (file+headline nil "Inbox")
                   "* TODO %?   :bug:\n  %T\n %a\n %i\n")
                  ("i" "Idea" entry (file+headline nil "Idea")
                   "* %?\n %U\n %i\n %a\n %i\n")))))

      (use-package ox-latex
        :init
        (progn
          (setq org-latex-pdf-process
                '("platex %f"
                  "platex %f"
                  "bibtex %b"
                  "platex %f"
                  "platex %f"
                  "dvipdfmx %b.dvi"))
          (setq org-export-latex-coding-system 'euc-jp-unix)
          (setq org-export-latex-date-format "%Y-%m-%d")
          (setq org-export-latex-classes nil)
          )
        :config
        (progn
          (add-to-list 'org-latex-classes
                       '("jarticle"
                         "\\documentclass[a4j]{jarticle}"
                         ("\\section{%s}" . "\\section*{%s}")
                         ("\\subsection{%s}" . "\\subsection*{%s}")
                         ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                         ("\\paragraph{%s}" . "\\paragraph*{%s}")
                         ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
          (setq org-latex-default-class "jarticle")))
    #+END_SRC
** open-junk-file
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package open-junk-file
        :bind
        (("C-c C-j" . open-junk-file)))
    #+END_SRC
* フックの設定
** src
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-save-hook
               'executable-make-buffer-file-executable-if-script-p) ;ファイルが#! から始まる場合, +x を付ける
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC
* ediffの設定
** src
   #+BEGIN_SRC emacs-lisp
     ;; コントロール用のバッファを同一フレーム内に表示
     (setq ediff-window-setup-function 'ediff-setup-windows-plain)
     ;; diffのバッファを上下ではなく左右に並べる
     (setq ediff-split-window-function 'split-window-horizontally)
   #+END_SRC
* yasnippet
** src
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :defer t
       :commands
       (yas-global-mode)
       :config
       (progn
         (bind-keys :map yas-minor-mode-map
                    ("C-x i n" . yas-new-snippet)
                    ("C-x i i" . yas-insert-snippet)
                    ("C-x i v" . yas-visit-snippet-file)
                    ("TAB" . yas-next-field)
                    ("<tab>" . nil)
                    ("C-i" . nil)))
       :init
       (setq yas-snippet-dirs '("~/.emacs.d/conf/snippets"))
       (yas-global-mode 1))

     (use-package helm-c-yasnippet
       :commands (helm-yas-complete)
       :bind ("C-o" . helm-yas-complete)
       :config
       (progn
         (setq helm-yas-space-match-any-greedy t)))

   #+END_SRC
