* マクロ・関数の設定
** src
   #+BEGIN_SRC emacs-lisp
     (defmacro with-suppressed-message (&rest body)
       "Suppress new messages temporarily in the echo area and the `*Messages*' buffer while BODY is evaluated."
       (declare (indent 0))
       (let ((message-log-max nil))
         `(with-temp-message (or (current-message) "") ,@body)))
   #+END_SRC

* Emacsの設定
  * GCを行う閾値の設定をする
** src
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold (* 2 1024 1024))
   #+END_SRC
* Emacs Versionの設定
  変数emacs-major-version, emacs-minor-versionを設定する

** src
  #+BEGIN_SRC emacs-lisp
    (defvar init-emacs-ver
      (cond ((= 24 emacs-major-version)
             (cond ((= 1 emacs-minor-version) 'emacs-24-1)
                   ((= 3 emacs-minor-version) 'emacs-24-3)))
            (t 'emacs-other)))
  #+END_SRC

* init用の関数定義
** src
   #+BEGIN_SRC emacs-lisp
     (defun init-add-autoload (file list)
       ;; add autoload function from list
       (if (null list) t
         (let ((fun (car list)))
           (autoload fun file nil t)
           (init-add-autoload file (cdr list)))))

     (defun init-add-fun-to-hooks (fun hooks)
       ;; add function to hooks
       (if (null hooks) t
         (let ((hook (car hooks)))
           (add-hook hook fun)
           (init-add-fun-to-hooks fun (cdr hooks)))))

     (defmacro append-to-list (to lst)
       `(setq ,to (append ,lst ,to)))
   #+END_SRC
* 定数の設定
  * init-emacs-local-files : ローカルで使用するファイルの置き場所(ex. undohist)
** src
   #+BEGIN_SRC emacs-lisp
     (defvar init-emacs-local-files "~/.emacs.d/local")
   #+END_SRC
* use package
  init.elが書きやすくなるマクロを定義したパッケージ

** src
  #+BEGIN_SRC emacs-lisp
    (setq use-package-verbose t)
    (eval-when-compile
      (require 'use-package))
    (require 'bind-key)
  #+END_SRC

* 文字コード/ファイル名の設定
  ロケールやosによってデフォルトのコーディングを変える

** src
  #+BEGIN_SRC emacs-lisp
    (set-language-environment "Japanese")  ; emacs のロケールを日本語に
    (cond ((eq system-type 'gnu/linux)
           (set-face-attribute 'default nil
                        :family "Ricty Diminished Discord"
                        :height 120)
          (set-fontset-font (frame-parameter nil 'font)
                            'japanese-jisx0208
                            (cons "Ricty Diminished Discord" "iso10646-1"))
          (set-fontset-font (frame-parameter nil 'font)
                            'japanese-jisx0212
                            (cons "Ricty Diminished Discord" "iso10646-1"))
          (set-fontset-font (frame-parameter nil 'font)
                            'katakana-jisx0201
                            (cons "Ricty Diminished Discord" "iso10646-1"))
          (prefer-coding-system 'utf-8)
          (setq coding-system-for-read 'utf-8)
          (setq coding-system-for-write 'utf-8))
          ((eq system-type 'darwin)
           (prefer-coding-system 'utf-8)
           (set-face-attribute 'default nil :family "Menlo" :height 140)
           (if (display-graphic-p)
               (set-fontset-font (frame-parameter nil 'font)
                                 'japanese-jisx0208
                                 (font-spec :family "Hiragino Kaku Gothic ProN")))
           (add-to-list 'face-font-rescale-alist
                        '(".*Hiragino Kaku Gothic ProN.*" . 1.2))
           (when (require 'ucs-normalize nil t)
             (setq file-name-coding-system 'utf-8)
             (setq local-coding-system 'utf-8)))
          (t
           (prefer-coding-system 'sjis-dos)     ; Windows ならコーディングを sjis に
           (set-file-name-coding-system 'cp932) ; ファイル名も sjis
           (setq locale-coding-system 'cp932)))
  #+END_SRC
* misc
  雑多な設定
** src
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)                  ; ツールバーの消去
     (setq inhibit-startup-message t     ; 起動時の初期バッファーを表示させない
           frame-title-format "%f"       ; タイトルバーにファイルのフルパスを表示
           line-move-visual t            ; 論理行に対し表示行のように扱う
           case-fold-search t            ;
           completion-ignore-case t      ; 補完時に大文字小文字を区別しない
           kill-whole-line t             ; 先頭でkillしたら行を消去
           completion-ignore-case t)      ; ファイル検索時大文字小文字を区別しない
     (fset 'yes-or-no-p 'y-or-n-p)       ; y
     (auto-image-file-mode t)            ; バッファ内で画像ファイルを表示する
     (scroll-bar-mode -1)

     (setq save-place-file "~/.emacs.d/local/.places")
     (save-place-mode 1)

     ;;; バッファローカル変数のデフォルト設定
     (setq-default show-trailing-whitespace t) ; 不要な空白文字を表示
     (setq-default bidi-display-reordering nil) ; 文字を右から左に表示させない
     (setq-default tab-width 2)          ; タブの設定
     (setq-default indent-tabs-mode nil)     ; タブを使用しない
     (setq-default fill-column 80)       ; auto fillを80文字で設定

     ;;; カーソルの変更
     (blink-cursor-mode 0)                   ; 点滅させない
   #+END_SRC
** バックアップファイルの設定
*** src
    #+BEGIN_SRC emacs-lisp
      (setq auto-save-list-file-prefix (concat temporary-file-directory "auto-save-list/.saves-"))
      (setq backup-directory-alist
            `((".*" . ,temporary-file-directory)))
      (setq auto-save-file-name-transforms
            `((".*" ,temporary-file-directory t)))
    #+END_SRC
** 括弧の対応付けを行う
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package smartparens
        :init
        (smartparens-global-mode))
    #+END_SRC
* iedit
  選択箇所を同時に修正可能なパッケージ

** src
   #+BEGIN_SRC emacs-lisp
     (use-package iedit
       :bind
       (("C-]" . iedit-mode)))
   #+END_SRC
* elscreen
  emacs上でタブが使えるようになるパッケージ

** src
  #+BEGIN_SRC emacs-lisp
    (use-package elscreen
      :commands
      (elscreen-start)
      :config
      (progn
        (elscreen-set-prefix-key (kbd "C-;"))

        (defmacro elscreen-create-automatically (ad-do-it)
          (` (if (not (elscreen-one-screen-p))
                 (, ad-do-it)
               (elscreen-create)
               (elscreen-notify-screen-modification 'force-immediately)
               (elscreen-message "New screen is automatically created"))))

        (defadvice elscreen-next (around elscreen-create-automatically activate)
          (elscreen-create-automatically ad-do-it))

        (defadvice elscreen-previous (around elscreen-create-automatically activate)
          (elscreen-create-automatically ad-do-it))

        (defadvice elscreen-toggle (around elscreen-create-automatically activate)
          (elscreen-create-automatically ad-do-it)))
      :init
      (progn
        (elscreen-start)))
  #+END_SRC

* モードラインの設定

** src
   #+BEGIN_SRC emacs-lisp
     ;;; nyan-mode
     (use-package nyan-mode
       :commands
       (nyan-mode)
       :config
       (progn
         (setq nyan-bar-length 10
               nyan-wavy-trail nil)
         (nyan-stop-animation))
       :init
       (nyan-mode))

     ;; Helper function
     (defun shorten-directory (dir max-length)
       "Show up to `max-length' characters of a directory name `dir'."
       (let ((path (reverse (split-string (abbreviate-file-name dir) "/")))
             (output ""))
         (when (and path (equal "" (car path)))
           (setq path (cdr path)))
         (while (and path (< (length output) (- max-length 4)))
           (setq output (concat (car path) "/" output))
           (setq path (cdr path)))
         (when path
           (setq output (concat ".../" output)))
         output))

     ;; Mode line setup
     (defun init-mode-line-setup ()
       (setq-default
        mode-line-format
        '(; Position, including warning for 80 columns
          (:propertize "%4l:" face mode-line-position-face)
          (:eval (propertize "%3c" 'face
                             (if (>= (current-column) 80)
                                 'mode-line-80col-face
                               'mode-line-position-face)))
          ;; emacsclient [default -- keep?]
          mode-line-client
          " "
          ;; read-only or modified status
          (:eval
           (cond (buffer-read-only
                  (propertize "RO" 'face 'mode-line-read-only-face))
                 ((buffer-modified-p)
                  (propertize "**" 'face 'mode-line-modified-face))
                 (t "NE")))
          ;; directory and buffer/file name
          " "
          (:propertize (:eval (shorten-directory default-directory 30))
                       face mode-line-folder-face)
          (:propertize "%b"
                       face mode-line-filename-face)
          " "
          "["(:propertize mode-name face mode-line-mode-face)"]"
          (vc-mode vc-mode)
          (:propertize mode-line-process face mode-line-process-face)
          (global-mode-string global-mode-string)
          " "
          (:eval (when nyan-mode (list (nyan-create)))) "%p"
          ))

       ;; Extra mode line faces
       (make-face 'mode-line-read-only-face)
       (make-face 'mode-line-modified-face)
       (make-face 'mode-line-folder-face)
       (make-face 'mode-line-filename-face)
       (make-face 'mode-line-position-face)
       (make-face 'mode-line-mode-face)
       (make-face 'mode-line-process-face)
       (make-face 'mode-line-80col-face)

       (set-face-attribute 'mode-line nil
                           :foreground "spring green" :background "gray20"
                           :inverse-video nil
                           :box '(:line-width 2 :color "gray20" :style nil))
       (set-face-attribute 'mode-line-inactive nil
                           :foreground "gray80" :background "gray40"
                           :inverse-video nil
                           :box '(:line-width 4 :color "gray40" :style nil))
       (set-face-attribute 'mode-line-read-only-face nil
                           :inherit 'mode-line-face
                           :foreground "#4271ae"
                           :box '(:line-width 2 :color "#4271ae"))
       (set-face-attribute 'mode-line-modified-face nil
                           :inherit 'mode-line-face
                           :foreground "#c82829"
                           :background "#ffffff"
                           :box '(:line-width 2 :color "#c82829"))
       (set-face-attribute 'mode-line-folder-face nil
                           :inherit 'mode-line-face)
       (set-face-attribute 'mode-line-filename-face nil
                           :inherit 'mode-line-face
                           :foreground "deeppink"
                           :weight 'bold)
       (set-face-attribute 'mode-line-position-face nil
                           :inherit 'mode-line-face
                           :family "Menlo" :height 100)
       (set-face-attribute 'mode-line-mode-face nil
                           :inherit 'mode-line-face)
       (set-face-attribute 'mode-line-process-face nil
                           :inherit 'mode-line-face)
       (set-face-attribute 'mode-line-80col-face nil
                           :inherit 'mode-line-position-face
                           :foreground "black" :background "#eab700"))

     (init-mode-line-setup)
   #+END_SRC

* 表示関係
** Theme
*** src
    #+BEGIN_SRC emacs-lisp
      (setq init-load-theme-path "~/.emacs.d/el-get/dracula-theme/")
      (when (file-exists-p init-load-theme-path)
        (add-to-list 'custom-theme-load-path init-load-theme-path)
        (load-theme 'dracula t nil))
    #+END_SRC
** 括弧のハイライト
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package paren
        :config
        (progn
          (setq show-paren-delay 0.1   ;括弧のハイライトを表示するまでの時間
                show-paren-style 'expression) ;括弧の中もハイライト
          (set-face-background 'show-paren-match-face nil) ;バックグランドフェイスを消す
          (set-face-underline 'show-paren-match-face "red")) ;下線の色をつける
        :init
        (show-paren-mode t))
    #+END_SRC

** pretty-mode
   lambdaや<=などの文字列をλなどの記号に置き換える.
*** 内容
    - racket-modeをscheme-modeの置き換えに対応付ける
    - ∅(pretty-modeでは:nilのgroup)を表示させない
    - プログラム関係のファイルのフック(prog-mode-hook)に掛ける

*** src
    #+BEGIN_SRC emacs-lisp
      (setq prettify-symbols-unprettify-at-point 'right-edge)
      (global-prettify-symbols-mode)
    #+END_SRC

** 現在行のハイライト
*** 参考url
    http://rubikitch.com/2015/05/14/global-hl-line-mode-timer/
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package hl-line
        :init
        (progn
          (defun global-hl-line-timer-function ()
            (global-hl-line-unhighlight-all)
            (let ((global-hl-line-mode t))
              (global-hl-line-highlight)))
          (setq global-hl-line-timer
                (run-with-idle-timer 0.05 t 'global-hl-line-timer-function))))
    #+END_SRC
* キーバインドの設定
** src
   #+BEGIN_SRC emacs-lisp
     (define-key key-translation-map (kbd "C-h") (kbd "<DEL>")) ; C-hをBackSpaceキーに変更
     (bind-key "C-h" nil)
     (bind-key "C-m" 'newline-and-indent)            ; C-m に改行 インデントを割り当てる(
     (bind-key "C-c l" 'toggle-truncate-lines)       ; C-c l に折り返しを割り当てる
     (bind-key "M-l" 'goto-line)
     (bind-key "C-c i" 'init-open-dotemacs)          ; C-c で init ファイルオープン
     (bind-key "C-c j" 'split-window-horizontally)
     (bind-key "C-c u" 'split-window-vertically)
     (bind-key "C-c r" 'query-replace)
     (bind-key "C-x w" 'delete-frame)

     (defun init-open-dotemacs ()
       (interactive)
       (find-file "~/.emacs.d/init.org"))
   #+END_SRC

* skk
  日本語入力システム
** src
   #+BEGIN_SRC emacs-lisp
     (use-package skk
       :commands
       (skk-mode skk-latin-mode-on)
       :bind
       (("<muhenkan>" . skk-mode)
        ("<zenkaku-hankaku>" . skk-mode))
       :init
       (progn
         (defun init-skk-mode-hooks ()
           (progn
             (skk-mode 1)
             (skk-latin-mode-on)))

         (init-add-fun-to-hooks 'init-skk-mode-hooks
                                '(find-file-hook lisp-intraction-mode-hook))

         (setq skk-user-directory (file-name-as-directory (concat (file-name-as-directory init-emacs-local-files) ".ddskk")))

         (defun init-check-jisyo-file ()
           (unless (file-exists-p
                    (concat skk-user-directory "SKK-JISYO.L"))
             (unless (file-exists-p skk-user-directory)
               (make-directory skk-user-directory))
             (message "Downloading SKK-JISYO.L")
             (url-copy-file "http://openlab.jp/skk/dic/SKK-JISYO.L.gz" "SKK-JISYO.L.gz")
             (message "Decompressing SKK-JISYO.L")
             (call-process-shell-command "gzip -d SKK-JISYO.L.gz")
             (message "Move SKK-JISYO.L")
             (call-process-shell-command (format "mv SKK-JISYO.L %s" skk-user-directory))))

         (init-check-jisyo-file))
       :config
       (progn
         (setq-default skk-kutouten-type 'en)
         (setq default-input-method "japanese-skk"
               ;; skk-kuten-touten-alist '((jp . ("." . "," ))
               ;;                          (en . ("." . ","))); 句読点を「，．」にする
               skk-large-jisyo (concat (file-name-as-directory skk-user-directory) "SKK-JISYO.L")
               skk-use-azik t
               skk-azik-keyboard-type 'jp106)

         (skk-mode 1)                     ; 次のfaceを定義させるために必要

         (set-face-attribute 'skk-emacs-hiragana-face nil
                             :family "MigMix 2M"
                             :foreground "pink")))
   #+END_SRC
* recentf
  最近開いたファイルを保存する
** src
   #+BEGIN_SRC emacs-lisp
     (use-package recentf
       :init
       (progn
         (setq recentf-save-file "~/.emacs.d/local/recentf/.recentf")
         (setq recentf-max-saved-items 2000)
         (setq recentf-exclude '(".recentf"))
         (setq recentf-auto-save-timer
               (run-with-idle-timer 30 t 'recentf-save-list))
         (setq recentf-auto-cleanup 60)
         (recentf-mode 1)))
     (use-package recentf-ext)
     (use-package sync-recentf)
   #+END_SRC
* auto-comple
** src
   #+BEGIN_SRC emacs-lisp
     (use-package auto-complete
       ;; :init
       ;; (ac-config-default)
       :init
       (progn
         (ac-set-trigger-key "TAB")
         (setq ac-quick-help-delay 0.2)))
   #+END_SRC
* auto-insert
  ファイルを開いた際に自動的にテンプレートを挿入するパッケージ
** src
   #+BEGIN_SRC emacs-lisp
     (use-package autoinsert
       :init
       (progn
         (setq auto-insert-directory "~/.emacs.d/conf/insert/" ; テンプレートファイルの場所
               auto-insert-query nil) ; テンプレートを挿入するか聞かない
         (use-package yatemplate
           :init
           (progn
             (setq yatemplate-dir (locate-user-emacs-file "conf/insert"))
             (yatemplate-fill-alist)))
         (auto-insert-mode 1)))
   #+END_SRC
* multi-term
  シェルモード
** src
   #+BEGIN_SRC emacs-lisp
     (use-package multi-term
       :commands
       (multi-term)
       :config
       (progn
         (setq multi-term-program "/bin/bash")
         (defalias 'shell 'multi-term)))
   #+END_SRC
* redo/undo関連
  * undo-tree : C-x u でundo treeを表示
** src
   #+BEGIN_SRC emacs-lisp
     (use-package undohist
       :commands
       (undohist-initialize)
       :config
       (progn
            (setq undohist-ignored-files '("COMMIT_EDITMSG")))
       :init
       (progn
         (setq undohist-directory (concat (file-name-as-directory init-emacs-local-files) ".undohist"))
         (undohist-initialize)))

     (use-package undo-tree
       :bind
       (("C-." . undo-tree-redo))
       :init
       (progn
         (global-undo-tree-mode)
         (bind-keys :map undo-tree-visualizer-mode-map
                    ("C-m" . undo-tree-visualizer-quit))))
   #+END_SRC
* sequential-command
  同じキーバインドで押下回数によって動作を変えれるパッケージ
** src
   #+BEGIN_SRC emacs-lisp
     (use-package sequential-command
       :init
       (progn

         (define-sequential-command seq-undo undo-tree-undo undo-tree-visualize))
       :config
       (progn
         (define-sequential-command seq-home
           beginning-of-line beginning-of-buffer seq-return)
         (define-sequential-command seq-end
           end-of-line end-of-buffer seq-return)

         (defun seq-upcase-backward-word ()
           (interactive)
           (upcase-word (- (1+ (seq-count*)))))
         (defun seq-capitalize-backward-word ()
           (interactive)
           (capitalize-word (- (1+ (seq-count*)))))
         (defun seq-downcase-backward-word ()
           (interactive)
           (downcase-word (- (1+ (seq-count*)))))

         (when (require 'org nil t)
           (define-sequential-command org-seq-home
             org-beginning-of-line beginning-of-buffer seq-return)
           (define-sequential-command org-seq-end
             org-end-of-line end-of-buffer seq-return))))

   #+END_SRC
* 正規表現
** pcre2el
   emacs上でpcre(perl正規表現)が使える
*** 参考url
    - http://rubikitch.com/2015/04/25/pcre2el/
*** key-bind
    - C-c / / :: rxt-explain emacsの正規表現をpcreで解説
    - C-c / c :: rxt-convert-syntax Emacs/PCRE間の変換し、kill-ringへ
    - C-c / x :: rxt-convert-to-rx rxへの変換
    - C-c / ′ :: rxt-convert-to-strings 文字列集合へ分解
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package pcre2el
        :config
        (progn
          (add-hook 'prog-mode-hook 'rxt-mode)
          (add-hook 'reb-mode-hook 'rxt-mode)
          (setq reb-re-syntax 'pcre)))
    #+END_SRC

** visual-regexp-steroids
   perl/pythonの正規表現でisearchが可能になる
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package visual-regexp-steroids
        :bind
        (("M-%" . vr/query-replace)
         ("C-M-%" . vr/query-replace)
         ("C-M-r" . vr/isearch-backward)
         ("C-M-s" . vr/isearch-forward)))
    #+END_SRC
* dired mode
** src
   #+BEGIN_SRC emacs-lisp
     (use-package dired
       :config
       (progn
         (bind-key "C-t" 'ace-window dired-mode-map)
         (require 'dired-x nil t)))

   #+END_SRC
* 矩形編集
  cua modeを使用する
** src
   #+BEGIN_SRC emacs-lisp
     (use-package cua-base
       :bind
       (("C-x SPC" . cua-set-rectangle-mark)
        ("C-x C-SPC" . cua-set-rectangle-mark))
       :config
       (progn
         ; cuaのキーバインドを禁止
         (setq cua-enable-cua-keys nil))
       :init
       (cua-mode 1))
   #+END_SRC
* ace-mode
** ace-jump-mode
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package ace-jump-mode
        :bind
        (("C-@" . ace-jump-char-mode))
        :init
        (progn
          (setq ace-jump-mode-move-keys
                (append "asdfghjkl;:]qwertyuiop@zxcvbnm,." nil))
          (setq ace-jump-word-mode-use-query-char nil)))
    #+END_SRC
** ace-jump-buffer
*** src
   #+BEGIN_SRC emacs-lisp
     (use-package ace-jump-buffer
       :disabled t
       :bind
       (("C-x b" . ace-jump-buffer)))

     (use-package ace-window
       :bind
       (("C-t" . ace-window)
        :map doc-view-mode-map
        ("C-t". ace-window))
       :init
       (progn
         (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))))
   #+END_SRC
** ace-isearch
*** 参考url
    http://rubikitch.com/2014/10/08/ace-isearch/
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package ace-isearch
        :config
        (progn
          (global-ace-isearch-mode 1)))
    #+END_SRC
* helm
** helm config
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package helm-config
        :bind
        (("C-x b" . helm-mini)
         ("C-x C-b" . helm-mini)
         ("M-x" . helm-M-x)
         ("C-x f" . helm-find-files)
         ("C-x C-f" . helm-find-files)
         ("M-y" . helm-show-kill-ring))
        :init
        (progn
          (setq  enable-recursive-minibuffers t
                 helm-exit-idle-delay 0
                 helm-ff-skip-boring-files t))
        :config
        (progn
          (append-to-list helm-boring-file-regexp-list
                          '("\\.omc$" "\\.o$" "\\.cmx$" "\\.cmi$" "\\.cmt$" "\\.omakedb" "\\.pyc$"
                            "\\.hi$" "\\.DS_Store"))

          (if (eq system-type 'darwin)
              (progn
                (setq helm-locate-fuzzy-match nil)
                (setq helm-locate-command "mdfind -name %s %s")))

          (append-to-list helm-boring-buffer-regexp-list
                          '("\\*magit"))))
    #+END_SRC
** helm-git
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package helm-ls-git
        :config
        (progn
          (setq helm-ls-git-show-abs-or-relative 'relative)
          (setq helm-ls-git-default-sources '(helm-source-ls-git-buffers
                                              helm-source-ls-git
                                              helm-source-ls-git-status
                                              ))))
    #+END_SRC
** helm-descbinds
   M-x describe-bindinsで表示させるkey-bindをhelmで使える
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package helm-descbinds
        :config
        (progn
          (helm-descbinds-mode)))
    #+END_SRC
** ac-helm
   auto completeをhelmで使える
*** src
   #+BEGIN_SRC emacs-lisp
     (use-package ac-helm
       :bind
       (("C-:" . ac-complete-with-helm))
       :init
       (progn
         (setq ac-comphist-file "~/.emacs.d/local/ac-comphist/ac-comphist.dat")))
   #+END_SRC

** helm swoop
   - color-moccurのような検索ができる
   - isearchの後にM-iでhelm-swoopもできる

   - M-x helm-swoop :: 検索を行う
*** 参考url
    http://rubikitch.com/2014/12/25/helm-swoop/
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package helm-swoop
        :bind
        (("C-s" . helm-swoop)
         ("C-r" . helm-swoop-back-to-last-point))
        :config
        (progn
          (setq helm-swoop-use-line-number-face t)
          (setq helm-swoop-split-window-function 'helm-default-display-buffer)

          (bind-keys :map helm-swoop-map
                           ("C-r" . helm-previous-line)
                           ("C-s" . helm-next-line))

          (bind-keys :map helm-swoop-map
                     ("C-r" . helm-previous-line)
                     ("C-s" . helm-next-line))

          ;; If there is no symbol at the cursor, use the last used words instead.
          (setq helm-swoop-pre-input-function
            (lambda ()
              (let (($pre-input (thing-at-point 'symbol)))
                (if (eq (length $pre-input) 0)
                    helm-swoop-pattern ;; this variable keeps the last used words
                  $pre-input))))

          (use-package migemo
            :config
            (progn
              (migemo-init)
              (helm-migemo-mode 1))
            :init
            (progn
              (setq migemo-command "cmigemo")
              (setq migemo-options '("-q" "--emacs"))))))
    #+END_SRC

** helm ls git
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package helm-ls-git
        :bind
        (("C-x C-d" . helm-browse-project)))
    #+END_SRC
** helm ag
   検索コマンドagを使った一括検索
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package helm-ag
        :bind
        (("C-c s" . helm-ag)
         ("C-c C-s" . helm-ag-project-root))
        :init
        (progn
          (setq helm-ag-insert-at-point t)))
    #+END_SRC
* プログラム関連
** web-mode
   htmlモードの設定
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package web-mode
        :mode ("\\.html\\'" . web-mode)
        :init
        (progn
          (setq web-mode-enable-engine-detection t)
          (setq web-mode-markup-indent-offset 2)
          (setq web-mode-code-indent-offset 2)))
    #+END_SRC
** tags
*** ctags
**** src
     #+BEGIN_SRC emacs-lisp
       (use-package ctags
         :config
         (progn
           (setq tags-revert-without-query t
                 ctags-command "ctags -R"))
         :bind
         (("<f5>" . ctags-create-or-update-tags-table))) ;tag ファイルの生成
     #+END_SRC
*** gtags
**** src
     #+BEGIN_SRC emacs-lisp
       (use-package helm-gtags
         :config
         (progn
           (bind-key "M-t" 'helm-gtags-find-tag)
           (bind-key "M-r" 'helm-gtags-find-rtag)
           (bind-key "M-s" 'helm-gtags-find-symbol)
           (bind-key "M-u" 'helm-gtags-pop-stack)))

     #+END_SRC
** lisp系
*** lispxmp
    プログラムの実行結果をコメントに表示させてくれるパッケージ
**** src
     #+BEGIN_SRC emacs-lisp
       (use-package lispxmp
         :commands
         (lispxmp)
         :init
         (progn
           (bind-key "C-c C-d" 'lispxmp emacs-lisp-mode-map)
           (bind-key "C-c C-d" 'lispxmp lisp-interaction-mode-map)))
     #+END_SRC

*** rainbow-delimiters
    括弧の対応付けを色で表示させてくれるパッケージ
**** src
     #+BEGIN_SRC emacs-lisp
       (use-package rainbow-delimiters
         :init
         (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
         (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))
     #+END_SRC

*** eldoc関連
    emacs-lispの関数の情報を表示するパッケージ
**** src
     #+BEGIN_SRC emacs-lisp
       (use-package eldoc
         :config
         (progn
              (require 'eldoc-extension nil t)
              (setq eldoc-idle-delay 0.1                ; eldocをすぐ表示
                    eldoc-echo-area-use-multiline-p t)) ; 複数行にわたって表示
         :init
         (progn
           (init-add-fun-to-hooks 'turn-on-eldoc-mode
                                  '(lisp-interaction-mode-hook
                                    lisp-mode-hook
                                    ielm-mode-hook
                                    emacs-lisp-mode-hook))))
     #+END_SRC
*** 雑多な設定
**** src
     #+BEGIN_SRC emacs-lisp
       (bind-key  "C-c f" 'describe-function emacs-lisp-mode-map)
       (bind-key  "C-c v" 'describe-variable emacs-lisp-mode-map)
       (set-face-foreground 'font-lock-regexp-grouping-backslash "green3")
       (set-face-foreground 'font-lock-regexp-grouping-construct "green3")
     #+END_SRC
** python
*** 一般
**** src
    #+BEGIN_SRC emacs-lisp
      (use-package virtualwrapper
        :config
        (progn
          (venv-initialize-interactive-shells)
          (venv-initialize-eshell)))

      (use-package python
        :mode
        (("\\.py\\'" . python-mode))
        :init
        (progn
          (setq python-shell-interpreter "python")))
      (use-package ein)
    #+END_SRC

*** jedi
    pythonの文法を汲んで補完するパッケージ
**** src
     #+BEGIN_SRC emacs-lisp
       (use-package jedi
         :init
         (progn
           (jedi:setup))
         :config
         (progn
           (setq jedi:complete-on-dot t)
           (setq ac-sources
                 (delete 'ac-source-words-in-same-mode-buffers ac-sources)) ;;jediの補完候補だけでいい
           (add-to-list 'ac-sources 'ac-source-filename)
           (add-to-list 'ac-sources 'ac-source-jedi-direct))
         (define-key jedi-mode-map (kbd "<C-tab>") nil) ;;C-tabはウィンドウの移動に用いる
         (define-key python-mode-map (kbd "C-c t") 'jedi:goto-definition)
         (define-key python-mode-map (kbd "C-c b") 'jedi:goto-definition-pop-marker)
         (define-key python-mode-map (kbd "C-c r") 'helm-jedi-related-names))

     #+END_SRC
*** autopep8
    自動的にpepに合せてソースコードを変更してくれる
**** src
     #+BEGIN_SRC emacs-lisp
       (use-package py-autopep8
         :config
         (progn
           (setq py-autopep8-options '("--max-line-length=200"))
           (setq flycheck-flake8-maximum-line-length 200)
           (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)))
     #+END_SRC
** c言語
*** src
   #+BEGIN_SRC emacs-lisp
     (defun init-c-mode-common-hook ()
       (progn
         (gtags-mode 1)                              ;gtags モードに入るようにする
         (hide-ifdef-mode)
         (setq gdb-many-windows t) ; gdbのバッファを良い感じにする
         ))
     (add-hook 'c-mode-common-hook 'init-c-mode-common-hook)

   #+END_SRC
** make関連
*** cmake
**** src
     #+BEGIN_SRC emacs-lisp
       (use-package cmake-mode
         :mode
         (("CMakeLists.txt" . cmake-mode) ))
     #+END_SRC
** flycheck
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :config
        (progn
          (flycheck-define-checker pic-xc16-gcc
            "A C checker using pic gcc."
            :command ("xc16-gcc" "-Wall" "-Wextra" "-std=gnu99"
                      "-I/Applications/microchip/xc16/v1.30/support/generic/h/"
                      "-I/Applications/microchip/xc16/v1.30/support/dsPIC33F/h"
                      source)
            :error-patterns
            ((error line-start
                    (file-name) ":" line ":" column ":" " Error: " (message)
                    line-end)
             (error line-start
                    (file-name) ":" line ":" column ":" " Fatal Error: " (message)
                    line-end)
             (warning line-start
                      (file-name) ":" line ":" column ":" " Warning: " (message)
                      line-end))
            :modes (c-mode))

          (flycheck-define-checker python-pyflakes
              "A Python syntax and style checker using the pyflakes utility.
      See URL `http://pypi.python.org/pypi/pyflakes'."
              :command ("pyflakes" source-inplace)
              :error-patterns
              ((error line-start (file-name) ":" line ":" (message) line-end))
              :modes python-mode)

          (add-to-list 'flycheck-checkers 'python-pyflakes))
        :init
        (progn
          (setq flycheck-check-syntax-automatically '(mode-enable save))
          (global-flycheck-mode)))

      (use-package flycheck-pos-tip
        :init
        (flycheck-pos-tip-mode))

      (use-package flycheck-color-mode-line
        :config
        (progn
          (set-face-attribute 'flycheck-color-mode-line-warning-face nil
                              :foreground "orange")

          (set-face-attribute 'flycheck-color-mode-line-error-face nil
                              :foreground "tomato")

          (add-hook 'flycheck-mode-hook 'flycheck-irony-setup)))

    #+END_SRC
** swift
*** src
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'flycheck-checkers 'swift)
      (setq flycheck-swift-sdk-path
             (replace-regexp-in-string
              "\n+$" "" (shell-command-to-string
                         "xcrun --show-sdk-path --sdk macosx")))

      (use-package swift-mode)
    #+END_SRC

** highlight symbol
   識別子をハイライトするパッケージ

*** src
   #+BEGIN_SRC emacs-lisp
     (use-package highlight-symbol
       :config
       (progn
         (setq highlight-symbol-idle-delay 0.1))
       :init
       (progn
         (add-hook 'prog-mode-hook 'highlight-symbol-mode)))
   #+END_SRC

** obj-c
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package clang-format
        :init
        (progn
          (setq clang-format-style
                (concat "{ "
                        (combine-and-quote-strings
                         (list
                          "BasedOnStyle: llvm"
                          "BreakBeforeBraces: Linux"
                          "KeepEmptyLinesAtTheStartOfBlocks: false"
                          "ConstructorInitializerAllOnOneLineOrOnePerLine: true"
                          "BreakConstructorInitializersBeforeComma: false"
                          "PointerBindsToType: false"
                          "NamespaceIndentation: None"
                          "AllowAllParametersOfDeclarationOnNextLine: false"
                          "AllowShortFunctionsOnASingleLine: false"
                          "AllowShortIfStatementsOnASingleLine : true"
                          "ExperimentalAutoDetectBinPacking: true"
                          "ColumnLimit: 140"
                          "IndentWidth: 2") ", ")
                        " }"))
          (defun clang-auto-format-before-save-hook()
            (when (eq major-mode 'c-mode)
              (clang-format-buffer)))
          (add-hook 'before-save-hook 'clang-auto-format-before-save-hook))
          :config
          (progn
            (bind-key "C-c SPC" 'clang-format-region objc-mode-map)))
    #+END_SRC
** ocaml
*** opam
    ocmalのパッケージ管理ツール
**** src
     #+BEGIN_SRC emacs-lisp
       (let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var" "share")))))
         (when (and opam-share (file-directory-p opam-share))
           (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))))
     #+END_SRC
*** ocp-indent
    ocamlのインデントを自動で行なってくれるパッケージ
**** src
    #+BEGIN_SRC emacs-lisp
    (use-package ocp-indent)
    #+END_SRC
*** ocp-index
**** src
     #+BEGIN_SRC emacs-lisp
       ;; (use-package ocp-index)
     #+END_SRC
*** utop
**** src
    #+BEGIN_SRC emacs-lisp
      (use-package utop)
    #+END_SRC
*** merlin
**** src
     #+BEGIN_SRC emacs-lisp
       (use-package merlin
         :config
         (progn
           (defun merlin-show-error (x)
             (when x
                 (popup-tip x)))
           (advice-add 'merlin-show-error-on-current-line :filter-return
                       'merlin-show-error)
           (add-hook 'tuareg-mode-hook 'merlin-mode t)
           (add-hook 'caml-mode-hook 'merlin-mode t)))
     #+END_SRC
* popwin
** src
   #+BEGIN_SRC emacs-lisp
     (use-package popwin
       :commands
       (popwin-mode)
       :config
       (progn
         (setq popwin:close-popup-window-timer-interval 0.05)
         (append-to-list popwin:special-display-config
                         '(("*Help*" :height 20 :position bottom)
                           ("*Backtrace*":height 12 :position bottom :noselect t)
                           ("*ack*":height 12 :position bottom)
                           ("^\*Org.+\*$" :height 20 :position bottom :regexp t)
                           ("^\*magit.+\*$" :height 25 :position bottom :regexp t)
                           ("*ocaml-libraries*" :height 25 :position bottom :regexp t)
                           (" *undo-tree*" :width 0.3 :position right))))
       :init
       (popwin-mode 1))

   #+END_SRC
* 文章関連(Lightweight Markup etc.)
** rst
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package rst
        :mode ("\\.rst$" . rst-mode)
        :config
        (progn
          ; 背景が黒い場合はこうしないと見出しが見づらい
          (setq frame-background-mode 'dark)))
    #+END_SRC
** markdown
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package markdown-mode
        :mode ("\\.md$" . markdown-mode))
    #+END_SRC
** html
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package emmet-mode
        :init
        (progn
          (add-hook 'sgml-mode-hook 'emmet-mode) ;; マークアップ言語全部で使う
          (add-hook 'css-mode-hook  'emmet-mode) ;; CSSにも使う
          )
        :config
        (progn
          (add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2))) ;; indent はスペース2個
          (keyboard-translate ?\C-i ?\H-i) ;;C-i と Tabの被りを回避
          (define-key emmet-mode-keymap (kbd "C-j") nil);; C-j は newline のままにしておく
          (define-key emmet-mode-keymap (kbd "C-i") 'emmet-expand-line) ;; C-i で展開
         ))
    #+END_SRC
** TODO latex
*** src
    #+BEGIN_SRC emacs-lisp
      (setq tex-compile-commands
            '(("ptex2pdf -l -ot '-synctex=1' %f")))

      (setq pdf-latex-command "ptex2pdf")

      (setq TeX-default-mode 'japanese-latex-mode)

      (setq japanese-LaTeX-default-style "jarticle")
      (setq TeX-output-view-style '(("^dvi$" "." "xdvi '%d'")))
      (setq preview-image-type 'dvipng)
      (add-hook 'LaTeX-mode-hook (function (lambda ()
        (add-to-list 'TeX-command-list
          '("pTeX" "%(PDF)ptex %`%S%(PDFout)%(mode)%' %t"
           TeX-run-TeX nil (plain-tex-mode) :help "Run ASCII pTeX"))
        (add-to-list 'TeX-command-list
          '("pLaTeX" "%(PDF)platex %`%S%(PDFout)%(mode)%' %t"
           TeX-run-TeX nil (latex-mode) :help "Run ASCII pLaTeX"))
        (add-to-list 'TeX-command-list
          '("acroread" "acroread '%s.pdf' " TeX-run-command t nil))
        (add-to-list 'TeX-command-list
          '("pdf" "dvipdfmx -V 4 '%s' " TeX-run-command t nil))
        (load "beamer")
        )))

      (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
      (setq reftex-plug-into-AUCTeX t)

      (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (setq-default TeX-master nil)

      (add-hook 'LaTeX-mode-hook 'visual-line-mode)
      ;; (add-hook 'LaTeX-mode-hook 'flyspell-mode)
      (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

      ;; Change key bindings
      (add-hook 'reftex-mode-hook
       '(lambda ()
                     (define-key reftex-mode-map (kbd "\C-cr") 'reftex-reference)
                     (define-key reftex-mode-map (kbd "\C-cl") 'reftex-label)
                     (define-key reftex-mode-map (kbd "\C-cc") 'reftex-citation)
      ))

      ;; 数式のラベル作成時にも自分でラベルを入力できるようにする
      (setq reftex-insert-label-flags '("s" "sfte"))

      ;; \eqrefを使う
      (setq reftex-label-alist
            '(
              (nil ?e nil "\\eqref{%s}" nil nil)
              ))

      ; RefTeXで使用するbibファイルの位置を指定する
      (setq reftex-default-bibliography '("~/tex/biblio.bib" "~/tex/biblio2.bib"))
    #+END_SRC
** org-mode
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package org
        :commands
        (org-present-big org-present-small org-remove-inline-images org-display-inline-images)
        :config
        (progn
          (setq org-directory "~/projects/memo/"
                org-default-notes-file (concat org-directory "agenda.org") ; ディレクトリの設定
                org-startup-truncated nil ; 表示を打ち切らない
                org-export-htmlize-output-type 'css ; HTML出力したときコードハイライトcssを分離する
                org-return-follows-link t
                org-use-fast-todo-selection t
                org-display-custom-times "<%Y-%m-%d %H:%M:%S>" ; 日付けの設定
                org-time-stamp-custom-formats "<%Y-%m-%d %H:%M:%S>" ; 日付けの設定
                org-agenda-files '("~/projects/memo/agenda.org"))

          ;; org-babelの設定
          (org-babel-do-load-languages
           'org-babel-load-languages
           '((python . t)
             (ocaml . t)
             (haskell . t)
             (sh .t)
             (latex .t)))

          (setq org-todo-keywords
                '((sequence "TODO(t!)" "STARTED(s!)" "WAITING(w!)"
                            "|" "DONE(x!)" "CANCEL(c!)"))
                org-tag-alist
                '(("PROJECT" . ?p) ("BOOK" . ?b)))

          (set-face-attribute 'org-todo nil
                              :foreground "selectedMenuItemColor"
                              :box t )
          (set-face-attribute 'org-done nil
                              :box t)
          (setq org-todo-keyword-faces
                '(("STARTED" . (:foreground "Orange" :box t)))))
        :init
        (progn
          (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

          (add-hook 'org-mode-hook
                    (lambda ()
                      (auto-fill-mode 1)))

          (add-hook 'org-present-mode-hook
                    (lambda ()
                      (org-present-big)
                      (setq org-present-text-scale 4)
                      (org-display-inline-images)))

          (add-hook 'org-present-mode-quit-hook
                    (lambda ()
                      (org-present-small)
                      (org-remove-inline-images))))
        )

      (use-package org-capture
        :commands
        (org-agenda org-capture)
        :bind
        (("C-c a" . org-agenda)
         ("C-c m" . org-capture))
        :config
        (progn
          (setq org-capture-templates
                '(("t" "Task" entry (file+headline nil "Inbox")
                   "* TODO  %?\n %T\n %a\n %i\n")
                  ("m" "Memo" entry (file+headline nil "Memo")
                   "* %?\n %T\n %a\n %i\n")
                  ("b" "Bug" entry (file+headline nil "Inbox")
                   "* TODO %?   :bug:\n  %T\n %a\n %i\n")
                  ("i" "Idea" entry (file+headline nil "Idea")
                   "* %?\n %U\n %i\n %a\n %i\n")))))

      (use-package ox-latex
        :init
        (progn
          (setq org-latex-pdf-process
                '("platex %f"
                  "platex %f"
                  "bibtex %b"
                  "platex %f"
                  "platex %f"
                  "dvipdfmx %b.dvi"))
          (setq org-export-latex-coding-system 'euc-jp-unix)
          (setq org-export-latex-date-format "%Y-%m-%d")
          (setq org-export-latex-classes nil)
          )
        :config
        (progn
          (add-to-list 'org-latex-classes
                       '("jarticle"
                         "\\documentclass[a4j]{jarticle}"
                         ("\\section{%s}" . "\\section*{%s}")
                         ("\\subsection{%s}" . "\\subsection*{%s}")
                         ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                         ("\\paragraph{%s}" . "\\paragraph*{%s}")
                         ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
          (setq org-latex-default-class "jarticle")))
    #+END_SRC
** open-junk-file
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package open-junk-file
        :bind
        (("C-c C-j" . open-junk-file))
        :config
        (progn
          (setq open-junk-file-format "~/projects/memo/junk/%Y-%m-%d.")))

    #+END_SRC
** viewer
*** src
    #+BEGIN_SRC emacs-lisp
      (use-package viewer
        :commands
        (viewer-stay-in-setup)
        :config
        (progn
          (setq viewer-modeline-color-unwritable "tomato"
                viewer-modeline-color-view "orange")
          (viewer-change-modeline-color-setup)
          (bind-keys :map view-mode-map
                     ("m" . bm-toggle)
                     ("[" . bm-previous)
                     ("]" . bm-next)))
        :init
        (progn
          (setq view-read-only t)
          (viewer-stay-in-setup)))
    #+END_SRC
* フックの設定
** src
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-save-hook
               'executable-make-buffer-file-executable-if-script-p) ;ファイルが#! から始まる場合, +x を付ける
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC
* ediffの設定
** 内容
   - コントロール用のバッファを同一フレーム内に表示
   - diffのバッファを上下ではなく左右に並べる
   - ediff時org-modeならすべて表示させる
** src
   #+BEGIN_SRC emacs-lisp
     (setq ediff-window-setup-function 'ediff-setup-windows-plain)
     (setq ediff-split-window-function 'split-window-horizontally)

     (add-hook 'ediff-prepare-buffer-hook
               (lambda ()
                 (cond ((eq major-mode 'org-mode)
                        (visible-mode 1)))))
   #+END_SRC
* yasnippet
** src
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :defer t
       :commands
       (yas-global-mode)
       :config
       (progn
         (bind-keys :map yas-minor-mode-map
                    ("C-x i n" . yas-new-snippet)
                    ("C-x i i" . yas-insert-snippet)
                    ("C-x i v" . yas-visit-snippet-file)
                    ("TAB" . yas-next-field)
                    ("<tab>" . nil)
                    ("C-i" . nil)))
       :init
       (setq yas-snippet-dirs '("~/.emacs.d/conf/snippets"))
       (yas-global-mode 1))

     (use-package helm-c-yasnippet
       :commands (helm-yas-complete)
       :bind ("C-o" . helm-yas-complete)
       :config
       (progn
         (setq helm-yas-space-match-any-greedy t)))

   #+END_SRC
* ewwの設定
  emacs上で動作するブラウザ
** src
   #+BEGIN_SRC emacs-lisp
     (use-package eww
       :config
       (progn
         (setq eww-search-prefix "https://www.google.co.jp/search?q=")
         (setq eww-bookmarks-directory (concat user-emacs-directory "local/"))
         (defun eww-mode-hook--rename-buffer ()
           "Rename eww browser's buffer so sites open in new page."
           (rename-buffer "eww" t))

         (defvar eww-disable-colorize t)
         (defun shr-colorize-region--disable (orig start end fg &optional bg &rest _)
           (unless eww-disable-colorize
             (funcall orig start end fg)))
         (advice-add 'shr-colorize-region :around 'shr-colorize-region--disable)
         (advice-add 'eww-colorize-region :around 'shr-colorize-region--disable)

         (defun eww-disable-color ()
           "ewwで文字色を反映させない"
           (interactive)
           (setq-local eww-disable-colorize t)
           (eww-reload))
         (defun eww-enable-color ()
           "ewwで文字色を反映させる"
           (interactive)
           (setq-local eww-disable-colorize nil)
           (eww-reload))

         ;; (defun eww-disable-images ()
         ;;   "eww で画像表示させない"
         ;;   (interactive)
         ;;   (setq-local shr-put-image-function 'shr-put-image-alt)
         ;;   (eww-reload))
         ;; (defun eww-enable-images ()
         ;;   "eww で画像表示させる"
         ;;   (interactive)
         ;;   (setq-local shr-put-image-function 'shr-put-image)
         ;;   (eww-reload))
         (defun shr-put-image-alt (spec alt &optional flags)
            (insert alt))
         (defun eww-mode-hook--disable-image ()
           (setq-local shr-put-image-function 'shr-put-image-alt))

         (defun eww-mode-init ()
           (progn
             (eww-mode-hook--disable-image)
             (eww-mode-hook--rename-buffer)
             (setq show-trailing-whitespace nil)))

         (add-hook 'eww-mode-hook 'eww-mode-init)
         (bind-key "<backtab>" 'shr-previous-link eww-mode-map)
         (bind-key "C-c p" 'eww)
         ))
   #+END_SRC
* git gutter
  gitのdiffを表示させる
** src
  #+BEGIN_SRC emacs-lisp
    (use-package git-gutter
      :config
      (progn
        (global-git-gutter-mode t)))
  #+END_SRC
* hilight-symbol
** src
   #+BEGIN_SRC emacs-lisp
     (use-package highlight-symbol
       :config
       (progn
         (setq highlight-symbol-idle-delay 0.2))
       :init
       (progn
         (add-hook 'prog-mode-hook 'highlight-symbol-mode)))
   #+END_SRC
* window関連
** quit-window
   *Help*などでqを押したときにbufferを閉じる
** src
   #+BEGIN_SRC emacs-lisp
     (defadvice quit-window (before quit-window-always-kill)
       "When running `quit-window', always kill the buffer."
       (ad-set-arg 0 t))
     (ad-activate 'quit-window)
   #+END_SRC
* magit
** src
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind
       (("C-c C-g" . magit-status))
       :config
       (progn
         (magit-log-arguments '("--graph" "--decorate"))
         (append-to-list magit-diff-arguments '("--ignore-all-space"))
         (add-hook 'magit-mode-hook 'turn-on-magit-gitflow)
         ))
   #+END_SRC
* which key
  プレフィクスキーの次のキーを教えてくれるパッケージ
** 参考url
   http://rubikitch.com/2015/09/14/which-key/
** src
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config
       (progn
         (which-key-setup-side-window-bottom)
         (which-key-mode 1)))
   #+END_SRC
* wanderlust
** src
   #+BEGIN_SRC emacs-lisp
     (use-package wl
       :init
       (progn
         (setq elmo-imap4-default-server "imap.gmail.com"
               elmo-imap4-default-user "y.miyamoto324@gmail.com"
               elmo-imap4-default-authenticate-type 'clear
               elmo-imap4-default-port '993
               elmo-imap4-default-stream-type 'ssl

               ;;for non ascii-characters in folder-names
               elmo-imap4-use-modified-utf7 t)

         (setq wl-smtp-connection-type 'starttls
               wl-smtp-posting-port 587
               wl-smtp-authenticate-type "plain"
               wl-smtp-posting-user "Yohei MIYAMOTO"
               wl-smtp-posting-server "smtp.gmail.com"
               wl-local-domain "gmail.com"
               wl-message-id-domain "smtp.gmail.com")

         (setq wl-from "Yohei MIYAMOTO <myname@gmail.com>"

               ;;all system folders (draft, trash, spam, etc) are placed in the
               ;;[Gmail]-folder, except inbox. "%" means it's an IMAP-folder
               wl-default-folder "%inbox"
               wl-draft-folder   "%[Gmail]/Drafts"
               wl-trash-folder   "%[Gmail]/Trash"
               wl-fcc            "%[Gmail]/Sent"

               ;; mark sent messages as read (sent messages get sent back to you and
               ;; placed in the folder specified by wl-fcc)
               wl-fcc-force-as-read    t

               ;;for when auto-compleating foldernames
               wl-default-spec "%")
         ))
   #+END_SRC
* カーソル
** bm
   #+BEGIN_SRC emacs-lisp
     (use-package bm
       :bind
       (("M-p" . bm-toggle))
       )
   #+END_SRC
* tramp
** src
   #+BEGIN_SRC elisp
     (use-package tramp
       :init
       (progn
         (setq tramp-persistency-file-name (concat user-emacs-directory "local/.tramp"))
         (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash")))
       :config
       (progn
         (setq tramp-default-method "ssh")
         (add-to-list 'tramp-default-proxies-alist
                      '(nil "\\`root\\'" "/ssh:%h:"))
         (add-to-list 'tramp-default-proxies-alist
                      '("localhost" nil nil))
         (add-to-list 'tramp-default-proxies-alist
                      '((regexp-quote (system-name)) nil nil))))
   #+END_SRC
